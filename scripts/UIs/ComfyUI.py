# ~ ComfyUI.py | by ANXETY ~\n# Refactored by SuperAssistant for standard Python execution\n\nimport sys\nfrom pathlib import Path\nimport subprocess\nimport asyncio\nimport os\n\nproject_root = Path(__file__).parent.parent.parent\nscripts_dir = project_root / \"scripts\"\nif str(project_root) not in sys.path:\n    sys.path.insert(0, str(project_root))\nif str(scripts_dir) not in sys.path:\n    sys.path.insert(0, str(scripts_dir))\n\nfrom modules.Manager import download_url_to_path\nimport modules.json_utils as js\n\nosENV = os.environ\nCD = os.chdir\n\n# Constants\nUI = 'ComfyUI'\n\nPATHS = {k: Path(v) for k, v in osENV.items() if k.endswith('_path')}\nHOME = PATHS.get('home_path', Path.cwd())\nVENV = PATHS.get('venv_path', Path.cwd() / 'anxlight_venv')\nSETTINGS_PATH = PATHS.get('settings_path', Path.cwd() / 'config/settings.json')\n\nWEBUI = HOME / UI\nCUSTOM_NODES_PATH = WEBUI / 'custom_nodes'\nENV_NAME = js.read(SETTINGS_PATH, 'ENVIRONMENT.env_name') if SETTINGS_PATH.exists() else 'Colab'\nFORK_REPO = js.read(SETTINGS_PATH, 'ENVIRONMENT.fork') if SETTINGS_PATH.exists() else 'anxety-solo/sd-webui'\nBRANCH = js.read(SETTINGS_PATH, 'ENVIRONMENT.branch') if SETTINGS_PATH.exists() else 'main'\nREPO_URL = f\"https://huggingface.co/NagisaNao/ANXETY/resolve/main/{UI}.zip\"\n\nif HOME.exists():\n    CD(HOME)\n\n# ==================== WEBUI OPERATIONS ====================\n\nasync def _download_file(url, directory, filename):\n    directory = Path(directory)\n    directory.mkdir(parents=True, exist_ok=True)\n    file_path = directory / filename\n    if file_path.exists(): # Try to remove before download to ensure freshness\n        try:\n            file_path.unlink()\n        except OSError as e:\n            print(f\"--- [{UI}.py] Warning: Could not delete existing file {file_path}: {e} ---\", file=sys.stderr)\n\n    print(f\"--- [{UI}.py] Downloading {url} to {file_path} ---\")\n    success = download_url_to_path(url=url, target_full_path=str(file_path), log=True)\n    if not success:\n        print(f\"--- [{UI}.py] Error downloading {url} using download_url_to_path. ---\", file=sys.stderr)\n    return success\n\nasync def download_files(file_list):\n    tasks = []\n    for file_info in file_list:\n        parts = file_info.split(',')\n        url = parts[0].strip()\n        directory_str = parts[1].strip() if len(parts) > 1 else str(WEBUI)\n        filename = parts[2].strip() if len(parts) > 2 else Path(url).name\n        \n        directory = Path(directory_str)\n        tasks.append(_download_file(url, directory, filename))\n    \n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    all_successful = True\n    for i, result in enumerate(results):\n        if isinstance(result, Exception) or result is False:\n            print(f\"--- [{UI}.py] A download task failed for: {file_list[i]}. Exception/Result: {result} ---\", file=sys.stderr)\n            all_successful = False\n    if not all_successful:\n        print(f\"--- [{UI}.py] One or more file downloads failed in download_files. ---", file=sys.stderr)\n\n\nasync def download_configuration():\n    print(f\"--- [{UI}.py] Downloading configuration files and custom nodes ---\")\n    url_cfg = f\"https://raw.githubusercontent.com/{FORK_REPO}/{BRANCH}/__configs__\"\n    files_to_download = [\n        f\"{url_cfg}/{UI}/install-deps.py,{str(WEBUI)}\",\n        f\"{url_cfg}/{UI}/comfy.settings.json,{str(WEBUI / 'user' / 'default')}\",\n        f\"{url_cfg}/{UI}/Comfy-Manager/config.ini,{str(WEBUI / 'user' / 'default' / 'ComfyUI-Manager')}\",\n        f\"{url_cfg}/{UI}/workflows/anxety-workflow.json,{str(WEBUI / 'user' / 'default' / 'workflows')}\",\n    ]\n    for file_info in files_to_download:\n        parts = file_info.split(',')\n        directory = Path(parts[1].strip()) if len(parts) > 1 else WEBUI\n        directory.mkdir(parents=True, exist_ok=True)\n        \n    await download_files(files_to_download)\n\n    extensions_list = [\n        'https://github.com/Fannovel16/comfyui_controlnet_aux',\n        'https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet',\n        'https://github.com/hayden-fr/ComfyUI-Model-Manager',\n        'https://github.com/jags111/efficiency-nodes-comfyui',\n        'https://github.com/ltdrdata/ComfyUI-Impact-Pack',\n        'https://github.com/ltdrdata/ComfyUI-Impact-Subpack',\n        'https://github.com/ltdrdata/ComfyUI-Manager',\n        'https://github.com/pythongosssss/ComfyUI-Custom-Scripts',\n        'https://github.com/pythongosssss/ComfyUI-WD14-Tagger',\n        'https://github.com/ssitu/ComfyUI_UltimateSDUpscale',\n        'https://github.com/WASasquatch/was-node-suite-comfyui'\n    ]\n\n    CUSTOM_NODES_PATH.mkdir(parents=True, exist_ok=True)\n    original_cwd = Path.cwd()\n    try:\n        CD(CUSTOM_NODES_PATH)\n        print(f\"--- [{UI}.py] Cloning custom nodes into {CUSTOM_NODES_PATH} ---\")\n        procs = []\n        for command_str in extensions_list:\n            parts = command_str.split()\n            repo_url = parts[0]\n            repo_name_git = repo_url.split('/')[-1]\n            if repo_name_git.endswith('.git'):\n                repo_name_git = repo_name_git[:-4]\n            repo_name = parts[1] if len(parts) > 1 else repo_name_git\n\n            if (CUSTOM_NODES_PATH / repo_name).exists():\n                print(f\"--- [{UI}.py] Custom node '{repo_name}' already exists. Skipping clone. ---\")\n                continue\n            \n            process = await asyncio.create_subprocess_shell(\n                f\"git clone --depth 1 {repo_url} {repo_name}\",\n                stdout=subprocess.PIPE, stderr=subprocess.PIPE\n            )\n            procs.append(process)\n        \n        results = await asyncio.gather(*[p.communicate() for p in procs], return_exceptions=True)\n\n        for i, result in enumerate(results):\n            if isinstance(result, Exception):\n                print(f\"--- [{UI}.py] Error cloning custom node (exception): {result} ---\", file=sys.stderr)\n            elif procs[i].returncode != 0:\n                stdout, stderr = result\n                repo_name_failed = extensions_list[i].split('/')[-1].split()[0].replace('.git', '')\n                print(f\"--- [{UI}.py] Error cloning custom node '{repo_name_failed}'. Git stderr: {stderr.decode() if stderr else 'No stderr'} ---\", file=sys.stderr)\n                if stdout: print(f\"   Git stdout: {stdout.decode()}\", file=sys.stderr)\n    finally:\n        CD(original_cwd)\n\n    install_deps_script = WEBUI / \"install-deps.py\"\n    if install_deps_script.exists():\n        print(f\"--- [{UI}.py] Running downloaded {install_deps_script} (from __configs__) ---\")\n        python_executable = VENV / \"bin\" / \"python\"\n        if not python_executable.exists():\n            python_executable = sys.executable\n        \n        current_cwd = Path.cwd()\n        try:\n            CD(WEBUI)\n            process = await asyncio.create_subprocess_exec(\n                str(python_executable), str(install_deps_script),\n                stdout=subprocess.PIPE, stderr=subprocess.PIPE\n            )\n            stdout, stderr = await process.communicate()\n\n            if process.returncode == 0:\n                print(f\"--- [{UI}.py] {install_deps_script} executed successfully ---\")\n                if stdout and stdout.decode().strip(): print(f\"Output:\\n{stdout.decode().strip()}\")\n            else:\n                print(f\"--- [{UI}.py] ERROR running {install_deps_script} (Return Code: {process.returncode}) ---\", file=sys.stderr)\n                if stdout and stdout.decode().strip(): print(f\"STDOUT:\\n{stdout.decode().strip()}\", file=sys.stderr)\n                if stderr and stderr.decode().strip(): print(f\"STDERR:\\n{stderr.decode().strip()}\", file=sys.stderr)\n        except Exception as e:\n            print(f\"--- [{UI}.py] Exception running {install_deps_script}: {e} ---\", file=sys.stderr)\n        finally:\n            CD(current_cwd)\n    else:\n        print(f\"--- [{UI}.py] {install_deps_script} (expected from __configs__) not found after download attempt, skipping execution. ---\")\n\n\ndef unpack_webui():\n    zip_path = HOME / f\"{UI}.zip\"\n    print(f\"--- [{UI}.py] Step 1: Downloading WebUI from {REPO_URL} ---\")\n    \n    download_successful = download_url_to_path(url=REPO_URL, target_full_path=str(zip_path), log=True)\n    if not download_successful:\n        print(f\"--- [{UI}.py] ERROR: Download of {REPO_URL} failed. Cannot proceed. ---\", file=sys.stderr)\n        sys.exit(1)\n    \n    print(f\"--- [{UI}.py] Step 2: Unzipping {zip_path} to {WEBUI} ---\")\n    WEBUI.mkdir(parents=True, exist_ok=True)\n    \n    potential_deps_script = WEBUI / \"install-deps.py\"\n    if potential_deps_script.exists():\n        print(f\"--- [{UI}.py] Removing potentially stale {potential_deps_script} before unzip ---\")\n        try:\n            potential_deps_script.unlink()\n        except OSError as e:\n            print(f\"--- [{UI}.py] Warning: Could not delete {potential_deps_script}: {e} ---\", file=sys.stderr)\n\n    try:\n        subprocess.run([\"unzip\", \"-q\", \"-o\", str(zip_path), \"-d\", str(WEBUI)], check=True)\n    except Exception as e:\n        print(f\"--- [{UI}.py] ERROR during unzip: {e} ---\", file=sys.stderr)\n        sys.exit(1)\n\n    print(f\"--- [{UI}.py] Step 3: Removing {zip_path} ---\")\n    try:\n        subprocess.run([\"rm\", \"-rf\", str(zip_path)], check=True)\n    except Exception as e:\n        print(f\"--- [{UI}.py] WARNING during zip removal: {e} ---\", file=sys.stderr)\n\n\n# ======================== MAIN CODE =======================\nif __name__ == '__main__':\n    print(f\"--- AnxLight {UI} UI Installer Script ---\")\n    unpack_webui()\n    print(f\"--- [{UI}.py] Unpack finished, proceeding to download configuration & custom nodes ---\")\n    asyncio.run(download_configuration())\n    print(f\"--- [{UI}.py] Script finished ---\")\n