# ~ Forge.py | by ANXETY ~\n# Refactored by SuperAssistant for standard Python execution\n\nimport sys\nfrom pathlib import Path\nimport subprocess\nimport asyncio\nimport os\n\nproject_root = Path(__file__).parent.parent.parent\nscripts_dir = project_root / \"scripts\"\nif str(project_root) not in sys.path:\n    sys.path.insert(0, str(project_root))\nif str(scripts_dir) not in sys.path:\n    sys.path.insert(0, str(scripts_dir))\n\n# from modules.Manager import m_download # Not used directly in this version for main Forge download\nimport modules.json_utils as js\n\nosENV = os.environ\nCD = os.chdir\n\n# Constants\nUI = 'Forge'\n\nPATHS = {k: Path(v) for k, v in osENV.items() if k.endswith('_path')}\nHOME = PATHS.get('home_path', Path.cwd())\nVENV = PATHS.get('venv_path', Path.cwd() / 'anxlight_venv')\nSETTINGS_PATH = PATHS.get('settings_path', Path.cwd() / 'config/settings.json')\n\nWEBUI = HOME / UI\nFORGE_EXTENSIONS_PATH = WEBUI / 'extensions'\nENV_NAME = js.read(SETTINGS_PATH, 'ENVIRONMENT.env_name') if SETTINGS_PATH.exists() else 'Colab'\nFORK_REPO = js.read(SETTINGS_PATH, 'ENVIRONMENT.fork') if SETTINGS_PATH.exists() else 'anxety-solo/sd-webui'\nBRANCH = js.read(SETTINGS_PATH, 'ENVIRONMENT.branch') if SETTINGS_PATH.exists() else 'main'\n\nif HOME.exists():\n    CD(HOME)\n\n# ==================== WEBUI OPERATIONS ====================\n\nasync def _download_file(url, directory, filename):\n    directory = Path(directory)\n    directory.mkdir(parents=True, exist_ok=True)\n    file_path = directory / filename\n    if file_path.exists():\n        file_path.unlink() # Ensure fresh download for config files\n    process = await asyncio.create_subprocess_shell(\n        f\"curl -sLo \\\"{file_path}\\\" \\\"{url}\\\"\",\n        stdout=subprocess.DEVNULL, stderr=subprocess.PIPE\n    )\n    _, stderr = await process.communicate()\n    if process.returncode != 0:\n        print(f\"Error downloading {url}. curl stderr: {stderr.decode() if stderr else 'No stderr'}\", file=sys.stderr)\n\nasync def download_files(file_list):\n    tasks = []\n    for file_info in file_list:\n        parts = file_info.split(',')\n        url = parts[0].strip()\n        directory_str = parts[1].strip() if len(parts) > 1 else str(WEBUI)\n        filename = parts[2].strip() if len(parts) > 2 else Path(url).name\n        directory = Path(directory_str)\n        tasks.append(_download_file(url, directory, filename))\n    await asyncio.gather(*tasks)\n\nasync def download_configuration():\n    print(f\"--- [{UI}.py] Downloading configuration files and extensions ---\")\n    url_cfg = f\"https://raw.githubusercontent.com/{FORK_REPO}/{BRANCH}/__configs__\"\n    # Forge typically uses A1111's config files, or its own variants if specified in __configs__/Forge/\n    # For now, using generic ones as a placeholder, this might need Forge-specific config.json/ui-config.json from __configs__/Forge/\n    configs_to_download = [\n        f\"{url_cfg}/styles.csv,{str(WEBUI)}\",\n        f\"{url_cfg}/user.css,{str(WEBUI)}\",\n        f\"{url_cfg}/card-no-preview.png,{str(WEBUI / 'html')}\",\n        f\"{url_cfg}/notification.mp3,{str(WEBUI)}\",\n        # f\"{url_cfg}/gradio-tunneling.py,{str(VENV / 'lib/python3.10/site-packages/gradio_tunneling')},main.py\" # Likely handled by pre_flight_setup\n    ]\n    # Ensure target directories for files exist\n    for file_info in configs_to_download:\n        parts = file_info.split(',')\n        directory = Path(parts[1].strip()) if len(parts) > 1 else WEBUI\n        directory.mkdir(parents=True, exist_ok=True)\n    await download_files(configs_to_download)\n\n    extensions_list = [\n        'https://github.com/anxety-solo/webui_timer timer',\n        'https://github.com/anxety-solo/anxety-theme',\n        'https://github.com/anxety-solo/sd-civitai-browser-plus Civitai-Browser-Plus',\n        'https://github.com/gutris1/sd-image-viewer Image-Viewer',\n        'https://github.com/gutris1/sd-image-info Image-Info',\n        'https://github.com/gutris1/sd-hub SD-Hub',\n        # Note: Forge has built-in ADetailer (Integrated). This might be redundant or conflict.\n        # 'https://github.com/Bing-su/adetailer',\n        'https://github.com/hako-mikan/sd-webui-regional-prompter Regional-Prompter',\n    ]\n    # if ENV_NAME == 'Kaggle': # Platform-specific logic might be better elsewhere\n    #     extensions_list.append('https://github.com/anxety-solo/sd-encrypt-image Encrypt-Image')\n\n    FORGE_EXTENSIONS_PATH.mkdir(parents=True, exist_ok=True)\n    original_cwd = Path.cwd()\n    try:\n        CD(FORGE_EXTENSIONS_PATH)\n        print(f\"--- [{UI}.py] Cloning extensions into {FORGE_EXTENSIONS_PATH} ---\")\n        procs = []\n        for command_str in extensions_list:\n            parts = command_str.split()\n            repo_url = parts[0]\n            repo_name_git = repo_url.split('/')[-1]\n            if repo_name_git.endswith('.git'):\n                repo_name_git = repo_name_git[:-4]\n            repo_name = parts[1] if len(parts) > 1 else repo_name_git\n            \n            if (FORGE_EXTENSIONS_PATH / repo_name).exists():\n                print(f\"--- [{UI}.py] Extension '{repo_name}' already exists. Skipping clone. ---\")\n                continue\n\n            process = await asyncio.create_subprocess_shell(\n                f\"git clone --depth 1 {repo_url} {repo_name}\",\n                stdout=subprocess.PIPE, stderr=subprocess.PIPE\n            )\n            procs.append(process)\n\n        results = await asyncio.gather(*[p.communicate() for p in procs], return_exceptions=True)\n\n        for i, result in enumerate(results):\n            if isinstance(result, Exception):\n                print(f\"--- [{UI}.py] Error cloning extension (exception): {result} ---\", file=sys.stderr)\n            elif procs[i].returncode != 0:\n                stdout, stderr = result\n                repo_name_failed = extensions_list[i].split('/')[-1].split()[0].replace('.git', '') # Approximate\n                print(f\"--- [{UI}.py] Error cloning extension '{repo_name_failed}'. Git stderr: {stderr.decode() if stderr else 'No stderr'} ---\", file=sys.stderr)\n                if stdout: print(f\"   Git stdout: {stdout.decode()}\", file=sys.stderr)\n    finally:\n        CD(original_cwd)\n\ndef unpack_webui():\n    forge_repo_url = \"https://github.com/lllyasviel/stable-diffusion-webui-forge.git\"\n    \n    print(f\"--- [{UI}.py] Step 1: Cloning/Verifying WebUI from {forge_repo_url} into {WEBUI} ---\")\n    if WEBUI.exists():\n        print(f\"--- [{UI}.py] Directory {WEBUI} already exists. Assuming Forge is already cloned. Attempting to update... ---\")\n        original_cwd_git = Path.cwd()\n        try:\n            CD(WEBUI)\n            # Attempt to update the repository if it already exists\n            update_process = subprocess.run([\"git\", \"pull\"], check=True, capture_output=True, text=True)\n            print(f\"--- [{UI}.py] Forge repository updated successfully. Output: {update_process.stdout.strip()} ---\")\n        except subprocess.CalledProcessError as e:\n            print(f\"--- [{UI}.py] WARNING: 'git pull' failed for existing Forge clone: {e.stderr} ---\", file=sys.stderr)\n        except Exception as e:\n            print(f\"--- [{UI}.py] WARNING: Failed to update existing Forge clone: {e} ---\", file=sys.stderr)\n        finally:\n            CD(original_cwd_git)\n    else:\n        try:\n            subprocess.run([\"git\", \"clone\", forge_repo_url, str(WEBUI)], check=True)\n            print(f\"--- [{UI}.py] Forge repository cloned successfully. ---\")\n        except Exception as e:\n            print(f\"--- [{UI}.py] ERROR during git clone of Forge: {e} ---\", file=sys.stderr)\n            sys.exit(1)\n\n    # Removed the install.py check and execution logic as it's not standard for Forge post-clone.\n    # Forge's own launch scripts (webui.sh/bat -> launch.py) handle its internal setup.\n    print(f\"--- [{UI}.py] Forge repository is cloned/verified. Further setup is typically handled by Forge's own launch process. ---\")\n\n# ======================== MAIN CODE =======================\nif __name__ == '__main__':\n    print(f\"--- AnxLight {UI} UI Installer Script ---\")\n    \n    unpack_webui()\n    print(f\"--- [{UI}.py] Forge repository clone/update process finished, proceeding to download configuration (if any) ---\")\n    asyncio.run(download_configuration())\n    print(f\"--- [{UI}.py] Script finished ---\")\n